#!/usr/bin/env ruby

require "docopt"

begin
  cli = Docopt.docopt(<<~DOCOPT)
    Usage:
      wal watch --watcher <watcher-class>
        (--slot <replication-slot> | --tmp-slot)
        [--publication=<publication>...]
        [--replicator <replicator-class>]
      wal start <config-file>

    Options:
      -h --help                          Show this screen.
      --watcher=<watcher-class>          The watcher class to be used to listen for WAL changes.
      --slot=<replication-slot>          The replication slot that will be used.
      --tmp-slot                         Use a temporary replication slot.
      [--publication=<publication>...]   Force using the informed Postgres publications.
      [--replicator=<replicatior_class>] Change the replication driver class
  DOCOPT
rescue Docopt::Exit => err
  puts err.message
  exit
end

require "./config/environment"

db_config = ActiveRecord::Base.configurations.configs_for(name: "primary").configuration_hash

if cli["watch"]
  watcher = cli["--watcher"].constantize.new
  use_temporary_slot = cli["--tmp-slot"] || false
  replication_slot = cli["--slot"]
  replication_slot = replication_slot.presence || "wal_watcher_#{SecureRandom.alphanumeric(4)}" if use_temporary_slot
  publications = cli["--publication"] || []
  replicator = cli["--replicator"].presence&.constantize || Wal::Replicator

  puts "Watcher started for #{replication_slot} slot (#{publications.join(", ")})"
  replicator
    .new(replication_slot:, use_temporary_slot:, db_config:)
    .replicate_forever(watcher, publications:)
  puts "Watcher finished for #{replication_slot}"

elsif cli["start"]
  slots = YAML.load_file(cli["<config-file>"])["slots"]

  if slots.size > 1 && slots.values.any? { |slot| slot["replicator"] == "Wal::Pro::Replicator" }
    $stderr.puts "Error: wal-pro doesn't support multiple replication slots"
    exit 1
  end

  workers = slots.map do |slot, config|
    watcher = config["watcher"].constantize.new
    temporary = config["temporary"] || false
    publications = config["publications"] || []
    replicator = config["replicator"].presence&.constantize || Wal::Replicator

    Thread.new(slot, watcher, temporary, publications) do |replication_slot, watcher, use_temporary_slot, publications|
      replication_slot = "#{replication_slot}_#{SecureRandom.alphanumeric(4)}" if use_temporary_slot
      puts "Watcher started for #{replication_slot} slot (#{publications.join(", ")})"

      replicator
        .new(replication_slot:, use_temporary_slot:, db_config:)
        .replicate_forever(watcher, publications:)

      puts "Watcher finished for #{replication_slot}"
    end
  end

  Signal.trap("INT") do
    puts "Stopping WAL workers..."
    workers.each(&:kill)
    puts "WAL workers stopped"
  end

  workers.each(&:join)
end
