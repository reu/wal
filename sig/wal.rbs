# typed: strong
module Wal
end

Wal::Event: untyped

Wal::VERSION: untyped

class Wal::BeginTransactionEvent < T::Struct
  def estimated_size: () -> Integer
end

class Wal::CommitTransactionEvent < T::Struct
end

module Wal::ChangeEvent
  def diff: () -> ::Hash[String, [ untyped, untyped ]]

  def changed_attribute?: (Symbol | String attribute) -> bool

  def attribute: (Symbol | String attribute) -> untyped

  def attribute_changes: (Symbol | String attribute) -> [ untyped, untyped ]?

  def attribute_was: (Symbol | String attribute) -> untyped
end

class Wal::InsertEvent < T::Struct
  include ::Wal::ChangeEvent

  def diff: () -> ::Hash[String, [ untyped, untyped ]]
end

class Wal::UpdateEvent < T::Struct
  include ::Wal::ChangeEvent

  def diff: () -> ::Hash[String, [ untyped, untyped ]]
end

class Wal::DeleteEvent < T::Struct
  include ::Wal::ChangeEvent

  def diff: () -> ::Hash[String, [ untyped, untyped ]]
end

module Wal::ActiveRecordContextExtension
  def set_wal_watcher_context: (untyped context, ?prefix: untyped prefix) -> untyped
end

class Wal::NoopWatcher
  include Wal::Watcher

  def on_event: (Event event) -> void
end

class Wal::RecordWatcher
  include Wal::Watcher

  extend T::Helpers

  def self.inherited: (untyped subclass) -> untyped

  def self.on_insert: (String | singleton(::ActiveRecord::Base) table) { (InsertEvent event) -> void } -> void

  def self.on_update: (String | singleton(::ActiveRecord::Base) table, ?changed: ::Array[String | Symbol]? changed) { (UpdateEvent event) -> void } -> void

  def self.on_save: (String | singleton(::ActiveRecord::Base) table, ?changed: ::Array[String | Symbol]? changed) { (InsertEvent | UpdateEvent event) -> void } -> void

  def self.on_destroy: (String | singleton(::ActiveRecord::Base) table) { (DeleteEvent event) -> void } -> void

  def on_record_changed: (RecordEvent event) -> void

  def should_watch_table?: (String table) -> bool

  def aggregation_strategy: (BeginTransactionEvent event) -> Symbol

  def on_event: (Event event) -> void
end

Wal::Wal::RecordWatcher::RecordEvent: untyped

class Wal::Wal::RecordWatcher::MemoryRecordWatcher
  include Wal::Watcher

  include Wal::Watcher::SeparatedEvents

  extend T::Helpers

  def initialize: (untyped watcher) -> void

  def on_begin: (BeginTransactionEvent event) -> void

  def on_commit: (untyped _event) -> untyped

  def on_insert: (InsertEvent event) -> void

  def on_update: (UpdateEvent event) -> void

  def on_delete: (DeleteEvent event) -> void
end

Wal::Wal::RecordWatcher::Wal::Wal::RecordWatcher::MemoryRecordWatcher::RecordsStorage: untyped

class Wal::Wal::RecordWatcher::TemporaryTableRecordWatcher
  include Wal::Watcher

  include Wal::Watcher::SeparatedEvents

  extend T::Helpers

  def initialize: (untyped watcher, ?batch_size: untyped batch_size) -> void

  def on_begin: (BeginTransactionEvent event) -> void

  def on_commit: (untyped _event) -> untyped

  def on_insert: (InsertEvent event) -> void

  def on_update: (UpdateEvent event) -> void

  def on_delete: (DeleteEvent event) -> void

  def base_class: () -> singleton(::ActiveRecord::Base)

  def serialize: (untyped event) -> untyped

  def deserialize: (untyped persisted_event) -> untyped
end

class Wal::Replicator
  include PG::Replication::Protocol

  def initialize: (?replication_slot: String replication_slot, ?use_temporary_slot: bool use_temporary_slot, ?db_config: ::Hash[Symbol, untyped] db_config) -> void

  def replicate_forever: (Watcher watcher, ?publications: ::Array[String] publications) -> void

  def replicate: (Watcher watcher, ?publications: ::Array[String] publications) -> ::Enumerator::Lazy[Event]
end

class Wal::Wal::Replicator::Column < T::Struct
  def decode: (untyped value) -> untyped
end

class Wal::Wal::Replicator::Table < T::Struct
  def primary_key: (untyped decoded_row) -> untyped

  def decode_row: (untyped values) -> untyped
end

class Wal::StreamingWatcher
  include Wal::Watcher

  extend T::Helpers

  def on_transaction_events: (::Enumerator[Event] events) -> void

  def queue_size: (BeginTransactionEvent event) -> Integer

  def on_event: (Event event) -> void
end

module Wal::Watcher
  include Wal

  extend T::Helpers

  def on_event: (Event event) -> void

  def should_watch_table?: (String table) -> bool

  def valid_context_prefix?: (String prefix) -> bool
end

module Wal::Wal::Watcher::SeparatedEvents
  def on_event: (Event event) -> void

  def on_begin: (BeginTransactionEvent event) -> void

  def on_insert: (InsertEvent event) -> void

  def on_update: (UpdateEvent event) -> void

  def on_delete: (DeleteEvent event) -> void

  def on_commit: (CommitTransactionEvent event) -> void
end
